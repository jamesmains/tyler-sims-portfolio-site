/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProjectsListingRouteImport } from './routes/projects-listing'
import { Route as DummyRouteImport } from './routes/dummy'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects/$projectId'
import { Route as AdminLoginRouteImport } from './routes/admin/login'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminManageProjectIdRouteImport } from './routes/admin/manage/$projectId'

const ProjectsListingRoute = ProjectsListingRouteImport.update({
  id: '/projects-listing',
  path: '/projects-listing',
  getParentRoute: () => rootRouteImport,
} as any)
const DummyRoute = DummyRouteImport.update({
  id: '/dummy',
  path: '/dummy',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdRoute = ProjectsProjectIdRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminManageProjectIdRoute = AdminManageProjectIdRouteImport.update({
  id: '/manage/$projectId',
  path: '/manage/$projectId',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dummy': typeof DummyRoute
  '/projects-listing': typeof ProjectsListingRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/admin/manage/$projectId': typeof AdminManageProjectIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dummy': typeof DummyRoute
  '/projects-listing': typeof ProjectsListingRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/admin/manage/$projectId': typeof AdminManageProjectIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dummy': typeof DummyRoute
  '/projects-listing': typeof ProjectsListingRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/admin/manage/$projectId': typeof AdminManageProjectIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/dummy'
    | '/projects-listing'
    | '/admin/dashboard'
    | '/admin/login'
    | '/projects/$projectId'
    | '/admin/manage/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/dummy'
    | '/projects-listing'
    | '/admin/dashboard'
    | '/admin/login'
    | '/projects/$projectId'
    | '/admin/manage/$projectId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/dummy'
    | '/projects-listing'
    | '/admin/dashboard'
    | '/admin/login'
    | '/projects/$projectId'
    | '/admin/manage/$projectId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  DummyRoute: typeof DummyRoute
  ProjectsListingRoute: typeof ProjectsListingRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects-listing': {
      id: '/projects-listing'
      path: '/projects-listing'
      fullPath: '/projects-listing'
      preLoaderRoute: typeof ProjectsListingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dummy': {
      id: '/dummy'
      path: '/dummy'
      fullPath: '/dummy'
      preLoaderRoute: typeof DummyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/manage/$projectId': {
      id: '/admin/manage/$projectId'
      path: '/manage/$projectId'
      fullPath: '/admin/manage/$projectId'
      preLoaderRoute: typeof AdminManageProjectIdRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminLoginRoute: typeof AdminLoginRoute
  AdminManageProjectIdRoute: typeof AdminManageProjectIdRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminLoginRoute: AdminLoginRoute,
  AdminManageProjectIdRoute: AdminManageProjectIdRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  DummyRoute: DummyRoute,
  ProjectsListingRoute: ProjectsListingRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
